use anyhow::bail;
use anyhow::Result;
use chrono::{DateTime, Utc};
use hex::encode;
use hmac::{Mac, SimpleHmac};
use multipart::server::Multipart;
use sha2::{Digest, Sha256};
use spin_sdk::http::{IntoResponse, Method, Request, Response};
use spin_sdk::http_component;
use std::fs::File;
use std::io::prelude::*;
use std::io::BufRead;
use std::str;
use substring::Substring;

pub async fn put(file_name: String, file: &[u8], bucket_name: &str) -> Result<()> {
    let host = "s3.amazonaws.com";
    let bucket = "seungjin";
    let target = format!("https://{bucket}.{host}/{file_name}");

    let access_key = std::env::var("S3_ACCESS_KEY").unwrap();
    let secret_key = std::env::var("S3_SECRET_KEY").unwrap();

    let content_length = file.len().to_string();

    let region = "us-east-1".to_string();
    let service = "s3".to_string();

    let x_amz_date = get_x_amz_date().await;
    let yyyymmdd = x_amz_date.substring(0, 8).to_string();

    let x_amz_content_sha256 = sha256hash(file).await.unwrap();

    let date_key = hmac_sha256(format!("AWS4{secret_key}"), yyyymmdd.clone())
        .await
        .unwrap();
    let date_region_key = hmac_sha256(date_key, region.clone()).await.unwrap();
    let date_region_service_key = hmac_sha256(date_region_key, service.clone()).await.unwrap();
    let signing_key = hmac_sha256(date_region_service_key, "aws4_request".to_string())
        .await
        .unwrap();

    let string_to_sign = format!(
        "AWS4-HMAC-SHA256\n{x_amz_date}\n{yyyymmdd}/{region}/{service}/aws4_request\n{signing_key}"
    );

    let signature = hmac_sha256(signing_key, string_to_sign.clone())
        .await
        .unwrap();

    println!("string_to_sign: {string_to_sign}");
    println!("signature: {signature}");
    println!("-------------------");

    let authorization = format!("AWS4-HMAC-SHA256 Credential={access_key}/{yyyymmdd}/{region}/s3/aws4_request,SignedHeaders=host;range;x-amz-content-sha256;x-amz-date,Signature={signature}");

    // AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20130524/us-east-1/s3/aws4_request,SignedHeaders=host;range;x-amz-content-sha256;x-amz-date,Signature=f0e8bdb87c964420e857bd35b5d6ed310bd44f0170aba48dd91039c6036bdb41
    // AWS4-HMAC-SHA256 Credential=433f5f8a64597b8aaf3c3289963e08b45631503d/20240304/ap-seoul-1/s3/aws4_request, SignedHeaders=content-length;content-type;host;x-amz-content-sha256;x-amz-date, Signature=97f2b4fb213899602ac9d5f898d76675d2c717ce92ecd8b0e36afabd6dbc2683"

    println!("{authorization}");

    let request = Request::builder()
        .method(Method::Put)
        .uri(target)
        .header("Authorization", authorization)
        .header("Content-Length", content_length)
        //.header("Content-Type", content_type)
        .header("X-Amz-Content-Sha256", x_amz_content_sha256)
        .header("X-Amz-Date", x_amz_date)
        .body(file.to_vec())
        .build();

    let response: Response = spin_sdk::http::send(request).await?;
    let r = response.status();
    let r1 = response.body();
    let r2 = std::str::from_utf8(r1).unwrap();

    println!("{r}");
    println!("{r2}");

    Ok(())
}

pub async fn get_x_amz_date() -> String {
    let current_time: DateTime<Utc> = Utc::now();
    current_time.format("%Y%m%dT%H%M%SZ").to_string()
}

// https://www.devglan.com/online-tools/hmac-sha256-online
pub async fn hmac_sha256(text: String, key: String) -> Result<String> {
    type HmacSha256 = SimpleHmac<Sha256>;
    let mut mac = HmacSha256::new_from_slice(key.as_bytes()).expect("Error from hmac_sha256");
    mac.update(text.as_bytes());
    let f = mac.finalize();
    let f1 = f.into_bytes();
    let result = hex::encode(&f1);
    Ok(result)
}

pub async fn sha256hash(data: &[u8]) -> Result<String> {
    let mut hasher = Sha256::new();
    hasher.update(data);
    let result = hasher.finalize();
    Ok(hex::encode(result))
}
